#!/usr/bin/env python

# This script manages the arguments provided along with the script

# print initial message
print("\n\n**********************************************")
print("** Tandem REpeat Annotation Toolkit (Treat) **")
print('******** put together by Niccolo Tesi ********')
print("*********** n.tesi@amsterdamumc.nl ***********")
print("**********************************************\n")

###########################################################
# Libraries
import argparse
import os
###########################################################

###########################################################
# Define the parser
parser = argparse.ArgumentParser(description='TREAT: Tandem REpeat Haplotyping Toolkit')
###########################################################

###########################################################
# Create subparsers
subp = parser.add_subparsers(dest='cmd', description='Analysis types:')
# read-based analysis
readAnal = subp.add_parser('reads', help='Read-based analysis', description='Analysis based on reads spanning the regions of interest.')
# assembly-based analysis
asseAnal = subp.add_parser('assembly', help='Assembly-based analysis', description='Analysis based on local assembly of reads spanning the regions of interest.')
# merge analysis
mergeAnal = subp.add_parser('merge', help='Merge multiple VCF together', description='Merge multiple VCF generated by Treat together.')
# analysis analysis
analAnal = subp.add_parser('analysis', help='Analysis of VCF file', description='Outlier-based detection of individuals with extreme TR expansion/contraction.')
# plot analysis
plotAnal = subp.add_parser('plot', help='Plot TR in VCF file', description='Visualize TR across samples and TR allele frequency.')
###########################################################

###########################################################
# Define the arguments for reads analysis
# required arguments
# bed file
readAnal.add_argument('-b', '--bed', required=True, help='BED file with the regions(s) to look at. Header is not required but if present, it must start with #.')
# input bam file(s)
readAnal.add_argument('-i', '--inBam', required=True, help='BAM file to be used as input. A directory can be provided, in which case all BAM files in the directory will be used.')
# output directory
readAnal.add_argument('-o', '--outDir', required=True, help='Output directory where to place outputs. If the directory exists, will add files there, otherwise the directory will be created.')
# reference genome
readAnal.add_argument('-r', '--ref', required=True, help='Path to reference genome data in FASTA format. Reference needs to be indexed.')
# optional arguments
# window around
readAnal.add_argument('-w', '--window', type = int, help = 'Integer. Will extend the regions defined in the BED file by this value upstream and downstreatm.', required = False, default = 10)
# number of threads
readAnal.add_argument('-t', '--cpu', type = int, help = 'Number of parallel threads to be used.', required = False, default = 2)
# phasing: path to snp data
readAnal.add_argument('-p', '--phasingData', type = str, help = 'The path to SNP data (in PLINK2 format).', required = False, default = 'None')
# phasing: path to mapping file between snp data and sequencing data
readAnal.add_argument('-m', '--mappingSNP', type = str, help = 'Path to a 2-column file with SNP IDs and sequencing IDs. If not provided, will assume the IDs are the same.', required = False, default = 'None')
# haplotyping: deviation
readAnal.add_argument('-d', '--HaploDev', type = float, help = 'During haplotying analysis, median absolute deviation to assign reads to the same allele.', required = False, default = 0.10)
# haplotyping: minimum supporting read number
readAnal.add_argument('-minSup', '--minimumSupport', type = int, help = 'During haplotying, minimum number of reads supporting each haplotyping.', required = False, default = 2)
# haplotyping: minimum coverage
readAnal.add_argument('-minCov', '--minimumCoverage', type = int, help = 'During haplotying, minimum number of total reads necessary for calling.', required = False, default = 5)
# raw sequences: rawSeq
readAnal.add_argument('-rawSeq', '--rawSequences', type = str, help = 'True/False. Whether to output the raw sequences with TRF annotation extracted from the bam file. (Default is False)', required = False, default = 'False')
###########################################################

###########################################################
# Define the arguments for assembly analysis
# required arguments
# bed file
asseAnal.add_argument('-b', '--bed', required=True, help='BED file with the regions(s) to look at. Header is not required but if present, it must start with #.')
# input bam file(s)
asseAnal.add_argument('-i', '--inBam', required=True, help='BAM file to be used as input. A directory can be provided, in which case all BAM files in the directory will be used.')
# output directory
asseAnal.add_argument('-o', '--outDir', help='Output directory where to place outputs. If the directory exists, will add files there, otherwise the directory will be created.')
# reference genome
asseAnal.add_argument('-r', '--ref', required=True, help='Path to reference genome data in FASTA format. Reference needs to be indexed.')
# optional arguments
# window around
asseAnal.add_argument('-w', '--window', type = int, help = 'Integer. Will extend the regions defined in the BED file by this value upstream and downstreatm.', required = False, default = 10)
# number of threads
asseAnal.add_argument('-t', '--cpu', type = int, help = 'Number of parallel threads to be used.', required = False, default = 2)
# haplotyping: deviation
asseAnal.add_argument('-d', '--HaploDev', type = float, help = 'During haplotying analysis, median absolute deviation to assign reads to the same allele.', required = False, default = 0.10)
# haplotyping: minimum supporting read number
asseAnal.add_argument('-minSup', '--minimumSupport', type = int, help = 'During haplotying, minimum number of reads supporting each haplotyping.', required = False, default = 2)
# haplotyping: minimum coverage
asseAnal.add_argument('-minCov', '--minimumCoverage', type = int, help = 'During haplotying, minimum number of total reads necessary for calling.', required = False, default = 5)
# window around for assembly
asseAnal.add_argument('-wAss', '--windowAssembly', type = int, help = 'Integer. Will extend the regions defined in the BED file by this value upstream and downstream to take reads for assembly.', required = False, default = 50)
# ploidy
asseAnal.add_argument('-p', '--ploidy', type = int, help = 'Integer. Estimated ploidy of the sample.', required = False, default = 2)
# software
asseAnal.add_argument('-s', '--software', type = str, help = 'Software to use for assembly (otter / hifiasm).', required = False, default = 'otter')
###########################################################

###########################################################
# Define the arguments for merge analysis
# required arguments
# vcf file
mergeAnal.add_argument('-v', '--vcf', required=True, help='Comma separated list of VCF files produced by TREAT to be merged.')
# optional arguments
# output directory
mergeAnal.add_argument('-o', '--outDir', help='Output directory where to place outputs. If not specified, will be the current directory.', required = False, default = './')
# output name
mergeAnal.add_argument('-n', '--outName', help='Name of the combined VCF file. If not specified, will the combined_treat.vcf.gz', required = False, default = 'combined_treat.vcf.gz')
###########################################################

###########################################################
# Define the arguments for outlier analysis
# required arguments
# add arguments: --reads_spannning is the VCF file of the output of read_spanning_analysis
analAnal.add_argument("-v", "--vcf", default = 'None', help = "VCF file output of TREAT. Multiple files should be comma-separated.", required = True)
# optional arguments
# add arguments: --out is the output directory
analAnal.add_argument("-o", "--outDir", default = './', help = "Output directory where output will be placed. Default is the current directory.", required = False)
# add arguments: --outname is the name of the output file
analAnal.add_argument("-n", "--outName", default = 'treat_analysis_output.txt', help = "Name of the plot. Default name is treat_analysis_output.txt", required = False)
# add arguments: --region is the name of the region to plot
analAnal.add_argument("-r", "--region", default = 'all', help = "Name of the region to analyze. By default, all regions will be analyzed.", required = False)
# add arguments: --madThr is the value to call outliers
analAnal.add_argument("-t", "--madThr", default = 3, help = "Median Absolute deviation value used to call outliers.", required = False)
###########################################################

###########################################################
# add arguments: --reads_spannning is the VCF file of the output of read_spanning_analysis
plotAnal.add_argument("-v", "--vcf", default = 'None', help = "VCF file output of TREAT. Multiple files should be comma-separated.", required = True)
# add arguments: --out is the output directory
plotAnal.add_argument("-o", "--outDir", default = './', help = "Output directory where output will be placed. Default is the current directory.", required = False)
# add arguments: --outname is the name of the output file
plotAnal.add_argument("-n", "--outName", default = 'None', help = "Name of the plot. Default values are msa (for multiple sequence alignment) or repeats (for repeat analysis)", required = False)
# add arguments: --region is the name of the region to plot
plotAnal.add_argument("-r", "--region", default = 'None', help = "Name of the region to plot. Can be one region, multiple (comma separated) regions, or all.", required = False)
# add arguments: --plotformat is whether to give png or pdf as output plot. Default is pdf
plotAnal.add_argument("-p", "--plotformat", default = 'pdf', help = "File format of output plot. Choices are png or pdf. Default value is pdf.", required = False)
# add arguments: --customColors accepts a file with 2 columns: sample name (same as in the data) and an additional column. Samples will be colored.
plotAnal.add_argument("-c", "--customColors", default = 'None', help = "Custom file for coloring options. Accepts a file with 2 columns, i.e sample name and a grouping variable.", required = False)
###########################################################

###########################################################
# Parse the arguments
args = parser.parse_args()
###########################################################

###########################################################
# Flag to run or not the main script
RUN = False
###########################################################

###########################################################
# Print message
if args.cmd == 'reads':
    print('Read-based analysis selected')
    print('** Required argument:')
    print("   Input BAM file(s): ", args.inBam)
    print("   Input BED file: ", args.bed)
    print("   Output directory: ", args.outDir)
    print("   Reference genome: ", args.ref)
    print('** Optional arguments:')
    print("   Window: ", args.window)
    print("   Number of threads: ", args.cpu)
    print("   Phasing data: ", args.phasingData)
    print("   Phasing data IDs: ", args.mappingSNP)
    print("   Haplotyping deviation: ", args.HaploDev)
    print("   Minimum supporting reads: ", args.minimumSupport)
    print("   Minimum coverage: ", args.minimumCoverage)
    print("   Write raw sequences: ", args.rawSequences)
    print("\n")
    # set flag to true
    RUN = True
    # define script to run and arguments
    script_path = 'read_based.py'
    arguments = [args.inBam, args.bed, args.outDir, args.ref, str(args.window), str(args.cpu), args.phasingData, args.mappingSNP, str(args.HaploDev), str(args.minimumSupport), str(args.minimumCoverage), str(args.rawSequences)]
elif args.cmd == 'assembly':
    print('Assembly-based analysis selected')
    print('** Required argument:')
    print("   Input BAM file(s): ", args.inBam)
    print("   Input BED file: ", args.bed)
    print("   Output directory: ", args.outDir)
    print("   Reference genome: ", args.ref)
    print('** Optional arguments:')
    print("   Window: ", args.window)
    print("   Window for assembly: ", args.windowAssembly)
    print("   Number of threads: ", args.cpu)
    print("   Assembly ploidy: ", args.ploidy)
    print("   Assembly software: ", args.software)
    print("   Haplotyping deviation: ", args.HaploDev)
    print("   Minimum supporting reads: ", args.minimumSupport)
    print("   Minimum coverage: ", args.minimumCoverage)
    print("\n")
    # set flag to true
    RUN = True
    # define script to run and arguments
    script_path = 'assembly_based.py'
    arguments = [args.inBam, args.bed, args.outDir, args.ref, str(args.window), str(args.windowAssembly), str(args.cpu), str(args.ploidy), args.software, str(args.HaploDev), str(args.minimumSupport), str(args.minimumCoverage)]
elif args.cmd == 'merge':
    print('Merge VCF analysis selected')
    print('** Required argument:')
    print("   Input VCF file(s): ", args.vcf)
    print("   Output directory: ", args.outDir)
    print("   Output name: ", args.outName)
    print("\n")
    # set flag to true
    RUN = True
    # define script to run and arguments
    script_path = 'merge_vcf.py'
    arguments = [args.vcf, args.outDir, args.outName]
elif args.cmd == 'analysis':
    print('Analysis of VCF selected')
    print('** Required argument:')
    print("   Input VCF file(s): ", args.vcf)
    print('** Optional arguments:')
    print("   Output directory: ", args.outDir)
    print("   Output name: ", args.outName)
    print("   Region to analyze: ", args.region)
    print("   Outlier threshold: ", args.madThr)
    print("\n")
    # set flag to true
    RUN = True
    # define script to run and arguments
    script_path = 'treat_analysis.R'
    arguments = [args.vcf, args.outDir, args.outName, args.region, args.madThr]
elif args.cmd == 'plot':
    print('Plot TR')
    print('** Required argument:')
    print("   Input VCF file(s): ", args.vcf)
    print('** Optional arguments:')
    print("   Output directory: ", args.outDir)
    print("   Output name: ", args.outName)
    print("   Region to analyze: ", args.region)
    print("   Plot format: ", args.plotformat)
    print("   Color palette: ", args.customColors)
    print("\n")
    # set flag to true
    RUN = True
    # define script to run and arguments
    script_path = 'treat_plot.R'
    arguments = [args.vcf, args.outDir, args.outName, args.region, args.plotformat, args.customColors]
else:
    print('!! Invalid run_type. Quitting.')
    print("\n")
###########################################################

###########################################################
# If all arguments are good, run the main script
if RUN == True:
    # Take main path
    main_path = os.path.realpath(__file__)
    main_path = '/'.join(main_path.split('/')[:-1])

    # Run the script
    if script_path in ['read_based.py', 'assembly_based.py', 'merge_vcf.py']:
        main_script = '~/.conda/envs/treat/bin/python %s/%s %s' %(main_path, script_path, ' '.join(arguments))
    elif script_path == 'treat_analysis.R':
        main_script = 'Rscript %s/%s --vcf %s --out %s --outname %s --region %s --madThr %s' %(main_path, script_path, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4])
    elif script_path == 'treat_plot.R':
        main_script = 'Rscript %s/%s --vcf %s --out %s --outname %s --region %s --plotformat %s --customColors %s' %(main_path, script_path, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5])
    os.system(main_script)
###########################################################